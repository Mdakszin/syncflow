// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model User {
  id String @id
  email String @unique
  name String?
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdTasks Task[] @relation("Reporter")
  assignedTasks Task[] @relation("Assignee")
}

model Workspace {
  id String @id
  name String @unique
  slug String @unique
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]
}

model Project {
  id String @id
  name String
  description String?
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task[]

  @@unique([name, workspaceId])
}

model Task {
  id String @id @default(cuid())
  title String
  description String?
  status String @default("TODO")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  reporter User @relation("Reporter", fields: [reporterId], references: [id])
  reporterId String

  assignee User? @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId String?

  
}
